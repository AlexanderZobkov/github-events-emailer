plugins {
    id 'groovy'
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "ru.vyarus.quality" version "4.7.0"
    id "com.gorylenko.gradle-git-properties" version "2.3.1"
    id "maven-publish"
}

group 'com.github.alexander-zobkov'
version '1.0-SNAPSHOT'

sourceSets {
    integrationTest {
        groovy.srcDir "$projectDir/src/integrationTest/groovy"
        resources.srcDir "$projectDir/src/integrationTest/resources"
    }
}

// https://github.com/gradle/gradle/issues/17236
tasks.withType(Copy).all {
    duplicatesStrategy 'exclude'
}

bootBuildImage {
    imageName = "docker.io/zobkov/${project.name}"
    docker {
        publishRegistry {
            username = System.getenv('DOCKER_USER')?:'DOCKER_USER is not set'
            password = System.getenv('DOCKER_PASS')?:'DOCKER_PASS is not set'
            url = "https://index.docker.io/v2/"
        }
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.apache.camel.springboot:camel-spring-boot-dependencies:3.13.0"
        mavenBom "org.springframework:spring-framework-bom:5.3.13"
        mavenBom 'org.codehaus.groovy:groovy-bom:3.0.9'
    }
}

dependencies {
    implementation 'org.kohsuke:github-api:1.135'
    implementation 'org.codehaus.groovy:groovy-xml'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.slf4j:jul-to-slf4j'
    implementation 'org.apache.camel.springboot:camel-spring-boot-starter'
    implementation 'org.apache.camel:camel-jetty'
    implementation 'org.apache.camel:camel-mail'
    implementation 'org.apache.camel:camel-micrometer'
    implementation 'org.apache.camel:camel-management'
    implementation 'org.apache.camel:camel-endpointdsl'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation platform('org.junit:junit-bom:5.8.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.vintage:junit-vintage-engine'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.apache.camel:camel-test-spring'
    testImplementation 'org.apache.camel:camel-spring-javaconfig'
    testImplementation platform('org.spockframework:spock-bom:2.0-groovy-3.0')
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.spockframework:spock-junit4'

    integrationTestImplementation 'org.testcontainers:spock:1.16.2'
    integrationTestImplementation 'org.codehaus.groovy:groovy-json'
    integrationTestImplementation 'com.github.alexdlaird:java-ngrok:1.5.5'
    integrationTestImplementation 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'
    integrationTestImplementation 'org.awaitility:awaitility:4.1.1'
}

configurations {
    runtimeClasspath.shouldResolveConsistentlyWith(compileClasspath)
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
    tasks.named("build").configure { it.dependsOn sourceJar }
}

bootJar {
    archiveClassifier = 'boot'
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
}

springBoot {
    buildInfo {
        properties {
            time = null
        }
    }
}

bootRun {
    doFirst { JavaExec task ->
        Properties props = new Properties()
        file("application-dev.properties").withInputStream { props.load(it) }
        props.each {
            task.environment(it.key, it.value)
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            groupId rootProject.group
            artifactId rootProject.name
            version rootProject.version
            pom.packaging = 'jar'
        }
    }
}

test {
    useJUnitPlatform()
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    group 'verification'
    description "Runs integration tests"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
    doFirst { Test task ->
        if (!Boolean.parseBoolean(System.getenv('CI'))) {
            Properties props = new Properties()
            file("integrationTests-dev.properties").withInputStream { props.load(it) }
            props.each {
                task.environment(it.key, it.value)
            }
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
