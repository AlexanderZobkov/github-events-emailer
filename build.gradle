plugins {
    id 'groovy'
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "ru.vyarus.quality" version "4.6.0"
    id "maven-publish"
    id "com.jfrog.artifactory" version '4.21.0'
}

group 'com.github.alexander-zobkov'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

bootBuildImage {
    imageName = "docker.io/zobkov/${project.name}"
    docker {
        publishRegistry {
            username = System.getenv('DOCKER_USER')?:'DOCKER_USER is not set'
            password = System.getenv('DOCKER_PASS')?:'DOCKER_PASS is not set'
            url = "https://index.docker.io/v2/"
        }
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.apache.camel.springboot:camel-spring-boot-dependencies:3.10.0"
        mavenBom "org.springframework:spring-framework-bom:5.3.7"
        mavenBom 'org.codehaus.groovy:groovy-bom:3.0.8'
    }
}

dependencies {
    implementation 'org.kohsuke:github-api:1.129'
    implementation 'org.codehaus.groovy:groovy-xml'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.apache.camel.springboot:camel-spring-boot-starter'
    implementation 'org.apache.camel:camel-jetty'
    implementation 'org.apache.camel:camel-mail'
    implementation 'org.apache.camel:camel-micrometer'
    implementation 'org.apache.camel:camel-management'
    implementation 'org.apache.camel:camel-endpointdsl'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation platform('org.junit:junit-bom:5.7.2')
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.apache.camel:camel-test-spring'
    testImplementation 'org.apache.camel:camel-spring-javaconfig'
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    runtimeClasspath.shouldResolveConsistentlyWith(compileClasspath)
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
    tasks.named("build").configure { it.dependsOn sourceJar }
}

bootJar {
    archiveClassifier = 'boot'
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
}

bootRun {
    doFirst {
        def props = new Properties()
        file("application-tests.properties").withInputStream { props.load(it) }
        systemProperties = props.collectEntries { it }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            groupId rootProject.group
            artifactId rootProject.name
            version rootProject.version
            pom.packaging = 'jar'
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = System.getenv('OJO_USER')
            password = System.getenv('OJO_KEY')
        }
        defaults {
            publications('maven')
            publishArtifacts = true
            publishPom = true
        }
    }
    clientConfig.info.setBuildNumber(System.getenv('BUILD_NUMBER'))
}

test {
    useJUnitPlatform()
}